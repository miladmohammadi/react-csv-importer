// Generated by dts-bundle-generator v6.4.0

import React from 'react';

export interface ImporterLocale {
	components: {
		ColumnDragCard: {
			dummyHeaderText: string;
			getHeaderText: (code: string) => string;
		};
		ColumnDragSourceArea: {
			ariaLabelText: string;
			getPageIndicatorText: (currentPage: number, pageCount: number) => string;
			getAssigningColumnText: (columnCode: string) => string;
			nextColumnsText: string;
			previousColumnsText: string;
		};
		ColumnDragTargetArea: {
			ariaLabelText: string;
		};
		ColumnPicker: {
			requiredFieldsErrorText: string;
			subtitleText: string;
		};
		FileSelector: {
			defaultText: string;
			dragActiveText: string;
		};
		FormatErrorMessage: {
			backText: string;
		};
		FileStep: {
			importErrorText: string;
			rawFileContentsText: string;
			previewImportText: string;
			hasHeadersText: string;
			loadingPreviewText: string;
		};
		FormatRawPreview: {
			getWarningText: (warningMessage: string) => string;
		};
		ImporterFrame: {
			previousStepText: string;
			nextStepText: string;
		};
		ProgressDisplay: {
			subtitleText: string;
			uploadMoreText: string;
			finishText: string;
			statusErrorText: string;
			statusCompleteText: string;
			statusPendingText: string;
			processedRowsText: string;
		};
		SourceBox: {
			clearAssignmentText: string;
			selectColumnText: string;
			unselectColumnText: string;
		};
		TargetBox: {
			optionalAriaLabelText: string;
			requiredAriaLabelText: string;
			boxPlaceholderText: string;
			getBoxValueActionText: (columnCode: string) => string;
			clearText: string;
		};
	};
}
export declare const enUS: ImporterLocale;
export declare const deDE: ImporterLocale;
export interface CustomizablePapaParseConfig {
	delimiter?: Papa.ParseConfig["delimiter"];
	newline?: Papa.ParseConfig["newline"];
	quoteChar?: Papa.ParseConfig["quoteChar"];
	escapeChar?: Papa.ParseConfig["escapeChar"];
	comments?: Papa.ParseConfig["comments"];
	skipEmptyLines?: Papa.ParseConfig["skipEmptyLines"];
	delimitersToGuess?: Papa.ParseConfig["delimitersToGuess"];
	chunkSize?: Papa.ParseConfig["chunkSize"];
	encoding?: Papa.ParseConfig["encoding"];
}
export declare type BaseRow = {
	[name: string]: unknown;
};
export declare type ParseCallback<Row extends BaseRow> = (rows: Row[], info: {
	startIndex: number;
}) => void | Promise<void>;
export interface ImporterPreviewColumn {
	index: number;
	header?: string;
	values: string[];
}
export interface ImporterFilePreview {
	rawData: string;
	columns: ImporterPreviewColumn[];
	skipHeaders: boolean;
	parseWarning?: Papa.ParseError;
}
export interface ImportInfo {
	file: File;
	preview: ImporterFilePreview;
	fields: string[];
	columnFields: (string | undefined)[];
}
export declare type ImporterContentRenderProp = (info: {
	file: File | null;
	preview: ImporterFilePreview | null;
}) => React.ReactNode;
export interface ImporterFieldProps {
	name: string;
	label: string;
	optional?: boolean;
}
export interface ImporterProps<Row extends BaseRow> extends CustomizablePapaParseConfig {
	assumeNoHeaders?: boolean;
	restartable?: boolean;
	processChunk: ParseCallback<Row>;
	onStart?: (info: ImportInfo) => void;
	onComplete?: (info: ImportInfo) => void;
	onClose?: (info: ImportInfo) => void;
	children?: ImporterContentRenderProp | React.ReactNode;
	locale?: ImporterLocale;
	sx?: any;
}
export declare const ImporterField: React.FC<ImporterFieldProps>;
export declare function Importer<Row extends BaseRow>({ assumeNoHeaders, restartable, processChunk, onStart, onComplete, onClose, children: content, locale, sx, ...customPapaParseConfig }: ImporterProps<Row>): React.ReactElement;

export {};
